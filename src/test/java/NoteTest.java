import BeatSaberObjects.Objects.Note;
import BeatSaberObjects.Objects.TimingNote;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class NoteTest {
    private final Note note01 = new Note(255.5f, 1, 1, 0, 1);
    private final Note note02 = new Note(256.5f, 2, 1, 0, 2);
    private final Note note03 = new Note(257.5f, 3, 2, 0, 3);
    private final Note note04 = new Note(258.5f, 1, 2, 0, 4);
    private final Note note05 = new Note(259.5f, 2, 3, 0, 5);
    private final Note note06 = new Note(260.5f, 3, 3, 0, 6);
    private final Note note07 = new Note(261.5f, 1, 1, 0, 7);
    private final Note note08 = new Note(262.5f, 2, 1, 0, 8);
    private final Note note09 = new Note(263.5f, 3, 2, 0, 1);
    private final Note note10 = new Note(264.5f, 1, 2, 0, 2);
    private final Note note11 = new Note(264.5f, 2, 3, 1, 3);
    private final Note note12 = new Note(264.5f, 3, 3, 1, 4);
    private final Note note13 = new Note(264.5f, 1, 1, 1, 5);
    private final Note note14 = new Note(264.5f, 2, 1, 1, 6);
    private final Note note15 = new Note(264.5f, 3, 2, 1, 7);
    private final Note note16 = new Note(264.5f, 1, 2, 1, 8);
    private final Note note17 = new Note(264.5f, 2, 3, 1, 1);
    private final Note note18 = new Note(264.5f, 3, 3, 1, 2);
    private final Note note19 = new Note(264.5f, 1, 1, 1, 3);
    private final Note note20 = new Note(264.5f, 2, 1, 1, 4);
    private final Note note21 = new Note(264.5f, 3, 2, 1, 5);

    @Test
    void constructor1() {
        Note note1 = new Note(0);
        Note note2 = new Note(10);
        Note note3 = new Note(1.1f);
        Assertions.assertEquals(0, note1._time);
        Assertions.assertEquals(10, note2._time);
        Assertions.assertEquals(1.1f, note3._time);

        Assertions.assertEquals(0, note1._lineIndex);
        Assertions.assertEquals(0, note2._lineIndex);
        Assertions.assertEquals(0, note3._lineIndex);

        Assertions.assertEquals(0, note1._lineLayer);
        Assertions.assertEquals(0, note2._lineLayer);
        Assertions.assertEquals(0, note3._lineLayer);

        Assertions.assertEquals(1, note1._type);
        Assertions.assertEquals(1, note2._type);
        Assertions.assertEquals(1, note3._type);

        Assertions.assertEquals(8, note1._cutDirection);
        Assertions.assertEquals(8, note2._cutDirection);
        Assertions.assertEquals(8, note3._cutDirection);

        Assertions.assertEquals(0, note1.amountOfStackedNotes);
        Assertions.assertEquals(0, note2.amountOfStackedNotes);
        Assertions.assertEquals(0, note3.amountOfStackedNotes);
    }

    @Test
    void constructor2() {

        Note note1 = new Note(0, 1, 5, 0, 7);
        Note note2 = new Note(10, 1, 5, 0, 7);
        Note note3 = new Note(1.1f, 1, 5, 0, 7);


        Assertions.assertEquals(0, note1._time);
        Assertions.assertEquals(10, note2._time);
        Assertions.assertEquals(1.1f, note3._time);

        Assertions.assertEquals(1, note1._lineIndex);
        Assertions.assertEquals(1, note2._lineIndex);
        Assertions.assertEquals(1, note3._lineIndex);

        Assertions.assertEquals(5, note1._lineLayer);
        Assertions.assertEquals(5, note2._lineLayer);
        Assertions.assertEquals(5, note3._lineLayer);

        Assertions.assertEquals(0, note1._type);
        Assertions.assertEquals(0, note2._type);
        Assertions.assertEquals(0, note3._type);

        Assertions.assertEquals(7, note1._cutDirection);
        Assertions.assertEquals(7, note2._cutDirection);
        Assertions.assertEquals(7, note3._cutDirection);

        Assertions.assertEquals(0, note1.amountOfStackedNotes);
        Assertions.assertEquals(0, note2.amountOfStackedNotes);
        Assertions.assertEquals(0, note3.amountOfStackedNotes);
    }

    @Test
    void constructor3() {

        Note note11 = new Note(0, 1, 5, 0, 7);
        Note note22 = new Note(10, 1, 5, 0, 7);
        Note note33 = new Note(1.1f, 1, 5, 0, 7);

        Note note1 = new Note(note11);
        Note note2 = new Note(note22);
        Note note3 = new Note(note33);


        Assertions.assertEquals(0, note1._time);
        Assertions.assertEquals(10, note2._time);
        Assertions.assertEquals(1.1f, note3._time);

        Assertions.assertEquals(1, note1._lineIndex);
        Assertions.assertEquals(1, note2._lineIndex);
        Assertions.assertEquals(1, note3._lineIndex);

        Assertions.assertEquals(5, note1._lineLayer);
        Assertions.assertEquals(5, note2._lineLayer);
        Assertions.assertEquals(5, note3._lineLayer);

        Assertions.assertEquals(0, note1._type);
        Assertions.assertEquals(0, note2._type);
        Assertions.assertEquals(0, note3._type);

        Assertions.assertEquals(7, note1._cutDirection);
        Assertions.assertEquals(7, note2._cutDirection);
        Assertions.assertEquals(7, note3._cutDirection);

        Assertions.assertEquals(0, note1.amountOfStackedNotes);
        Assertions.assertEquals(0, note2.amountOfStackedNotes);
        Assertions.assertEquals(0, note3.amountOfStackedNotes);
    }

    @Test
    void isDD() {
        Note note1_568 = new Note(352.0f, 3, 2, 1, 0);
        Note note2_568 = new Note(354.0f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_568.isDD(note2_568));
        Note note1_5258 = new Note(353.0f, 3, 1, 1, 0);
        Note note2_5258 = new Note(355.0f, 1, 0, 1, 1);
        Assertions.assertFalse(note1_5258.isDD(note2_5258));
        Note note1_563 = new Note(354.0f, 3, 1, 1, 1);
        Note note2_563 = new Note(356.0f, 3, 2, 1, 1);
        Assertions.assertTrue(note1_563.isDD(note2_563));
        Note note1_4632 = new Note(354.0f, 3, 1, 1, 1);
        Note note2_4632 = new Note(356.0f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_4632.isDD(note2_4632));
        Note note1_5852 = new Note(355.0f, 1, 0, 1, 1);
        Note note2_5852 = new Note(357.0f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_5852.isDD(note2_5852));
        Note note1_5710 = new Note(356.0f, 3, 2, 1, 0);
        Note note2_5710 = new Note(358.0f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_5710.isDD(note2_5710));
        Note note1_4862 = new Note(357.0f, 3, 2, 1, 5);
        Note note2_4862 = new Note(359.0f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_4862.isDD(note2_4862));
        Note note1_439 = new Note(358.0f, 3, 0, 1, 1);
        Note note2_439 = new Note(360.0f, 2, 0, 1, 1);
        Assertions.assertTrue(note1_439.isDD(note2_439));
        Note note1_7875 = new Note(358.0f, 3, 0, 1, 1);
        Note note2_7875 = new Note(360.0f, 3, 1, 1, 1);
        Assertions.assertTrue(note1_7875.isDD(note2_7875));
        Note note1_8698 = new Note(358.0f, 3, 0, 1, 1);
        Note note2_8698 = new Note(360.0f, 2, 0, 1, 1);
        Assertions.assertTrue(note1_8698.isDD(note2_8698));
        Note note1_8073 = new Note(358.0f, 3, 0, 1, 1);
        Note note2_8073 = new Note(360.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_8073.isDD(note2_8073));
        Note note1_9007 = new Note(359.0f, 3, 0, 1, 1);
        Note note2_9007 = new Note(360.25f, 2, 0, 1, 0);
        Assertions.assertFalse(note1_9007.isDD(note2_9007));
        Note note1_7947 = new Note(360.0f, 3, 1, 1, 0);
        Note note2_7947 = new Note(360.5f, 3, 2, 1, 0);
        Assertions.assertTrue(note1_7947.isDD(note2_7947));
        Note note1_5601 = new Note(360.0f, 3, 1, 1, 0);
        Note note2_5601 = new Note(360.5f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_5601.isDD(note2_5601));
        Note note1_2819 = new Note(360.25f, 2, 0, 1, 0);
        Note note2_2819 = new Note(360.75f, 2, 2, 1, 0);
        Assertions.assertTrue(note1_2819.isDD(note2_2819));
        Note note1_9417 = new Note(360.25f, 2, 0, 1, 0);
        Note note2_9417 = new Note(360.75f, 3, 1, 1, 7);
        Assertions.assertFalse(note1_9417.isDD(note2_9417));
        Note note1_506 = new Note(360.5f, 3, 1, 1, 1);
        Note note2_506 = new Note(361.0f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_506.isDD(note2_506));
        Note note1_7366 = new Note(360.75f, 3, 1, 1, 7);
        Note note2_7366 = new Note(361.25f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_7366.isDD(note2_7366));
        Note note1_4928 = new Note(361.0f, 3, 2, 1, 0);
        Note note2_4928 = new Note(361.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_4928.isDD(note2_4928));
        Note note1_8023 = new Note(361.25f, 2, 2, 1, 0);
        Note note2_8023 = new Note(361.75f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_8023.isDD(note2_8023));
        Note note1_8307 = new Note(361.5f, 3, 0, 1, 1);
        Note note2_8307 = new Note(362.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_8307.isDD(note2_8307));
        Note note1_1461 = new Note(361.75f, 2, 0, 1, 1);
        Note note2_1461 = new Note(362.25f, 1, 2, 1, 4);
        Assertions.assertFalse(note1_1461.isDD(note2_1461));
        Note note1_4775 = new Note(362.0f, 3, 1, 1, 0);
        Note note2_4775 = new Note(362.5f, 3, 2, 1, 0);
        Assertions.assertTrue(note1_4775.isDD(note2_4775));
        Note note1_5992 = new Note(362.0f, 3, 1, 1, 0);
        Note note2_5992 = new Note(362.5f, 1, 0, 1, 6);
        Assertions.assertFalse(note1_5992.isDD(note2_5992));
        Note note1_1836 = new Note(362.25f, 1, 2, 1, 4);
        Note note2_1836 = new Note(362.75f, 3, 1, 1, 7);
        Assertions.assertFalse(note1_1836.isDD(note2_1836));
        Note note1_3939 = new Note(362.5f, 1, 0, 1, 6);
        Note note2_3939 = new Note(363.0f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_3939.isDD(note2_3939));
        Note note1_2067 = new Note(362.75f, 3, 1, 1, 7);
        Note note2_2067 = new Note(364.0f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_2067.isDD(note2_2067));
        Note note1_3902 = new Note(363.0f, 3, 1, 1, 5);
        Note note2_3902 = new Note(365.0f, 2, 0, 1, 6);
        Assertions.assertFalse(note1_3902.isDD(note2_3902));
        Note note1_5509 = new Note(364.0f, 2, 2, 1, 0);
        Note note2_5509 = new Note(366.0f, 3, 2, 1, 1);
        Assertions.assertFalse(note1_5509.isDD(note2_5509));
        Note note1_4453 = new Note(365.0f, 2, 0, 1, 6);
        Note note2_4453 = new Note(367.0f, 3, 1, 1, 6);
        Assertions.assertTrue(note1_4453.isDD(note2_4453));
        Note note1_4671 = new Note(365.0f, 2, 0, 1, 6);
        Note note2_4671 = new Note(367.0f, 2, 0, 1, 5);
        Assertions.assertFalse(note1_4671.isDD(note2_4671));
        Note note1_4009 = new Note(366.0f, 3, 2, 1, 1);
        Note note2_4009 = new Note(368.0f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_4009.isDD(note2_4009));
        Note note1_5290 = new Note(367.0f, 2, 0, 1, 5);
        Note note2_5290 = new Note(369.0f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_5290.isDD(note2_5290));
        Note note1_7625 = new Note(368.0f, 3, 2, 1, 0);
        Note note2_7625 = new Note(370.0f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_7625.isDD(note2_7625));
        Note note1_3301 = new Note(369.0f, 3, 0, 1, 1);
        Note note2_3301 = new Note(371.0f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_3301.isDD(note2_3301));
        Note note1_6689 = new Note(370.0f, 3, 0, 1, 1);
        Note note2_6689 = new Note(372.0f, 3, 1, 1, 1);
        Assertions.assertTrue(note1_6689.isDD(note2_6689));
        Note note1_1603 = new Note(370.0f, 3, 0, 1, 1);
        Note note2_1603 = new Note(372.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_1603.isDD(note2_1603));
        Note note1_6405 = new Note(371.0f, 2, 2, 1, 0);
        Note note2_6405 = new Note(372.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_6405.isDD(note2_6405));
        Note note1_6099 = new Note(372.0f, 3, 1, 1, 0);
        Note note2_6099 = new Note(373.0f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_6099.isDD(note2_6099));
        Note note1_4594 = new Note(372.5f, 2, 0, 1, 1);
        Note note2_4594 = new Note(374.0f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_4594.isDD(note2_4594));
        Note note1_7618 = new Note(373.0f, 3, 1, 1, 1);
        Note note2_7618 = new Note(374.5f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_7618.isDD(note2_7618));
        Note note1_9341 = new Note(374.0f, 2, 2, 1, 0);
        Note note2_9341 = new Note(375.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_9341.isDD(note2_9341));
        Note note1_5345 = new Note(374.5f, 3, 2, 1, 0);
        Note note2_5345 = new Note(376.0f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_5345.isDD(note2_5345));
        Note note1_9489 = new Note(375.0f, 3, 0, 1, 7);
        Note note2_9489 = new Note(376.5f, 2, 2, 1, 4);
        Assertions.assertFalse(note1_9489.isDD(note2_9489));
        Note note1_5361 = new Note(376.0f, 3, 1, 1, 1);
        Note note2_5361 = new Note(377.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_5361.isDD(note2_5361));
        Note note1_1861 = new Note(376.5f, 2, 2, 1, 4);
        Note note2_1861 = new Note(378.0f, 3, 1, 1, 3);
        Assertions.assertFalse(note1_1861.isDD(note2_1861));
        Note note1_419 = new Note(377.0f, 3, 1, 1, 0);
        Note note2_419 = new Note(378.5f, 2, 0, 1, 6);
        Assertions.assertFalse(note1_419.isDD(note2_419));
        Note note1_4795 = new Note(378.0f, 3, 1, 1, 3);
        Note note2_4795 = new Note(379.0f, 0, 0, 1, 6);
        Assertions.assertFalse(note1_4795.isDD(note2_4795));
        Note note1_7807 = new Note(378.5f, 2, 0, 1, 6);
        Note note2_7807 = new Note(380.0f, 2, 0, 1, 5);
        Assertions.assertFalse(note1_7807.isDD(note2_7807));
        Note note1_4811 = new Note(379.0f, 0, 0, 1, 6);
        Note note2_4811 = new Note(380.5f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_4811.isDD(note2_4811));
        Note note1_957 = new Note(380.0f, 2, 0, 1, 5);
        Note note2_957 = new Note(381.0f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_957.isDD(note2_957));
        Note note1_5959 = new Note(380.5f, 3, 2, 1, 5);
        Note note2_5959 = new Note(381.5f, 1, 0, 1, 6);
        Assertions.assertFalse(note1_5959.isDD(note2_5959));
        Note note1_9303 = new Note(381.0f, 3, 0, 1, 1);
        Note note2_9303 = new Note(382.0f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_9303.isDD(note2_9303));
        Note note1_2560 = new Note(381.5f, 1, 0, 1, 6);
        Note note2_2560 = new Note(382.5f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_2560.isDD(note2_2560));
        Note note1_7708 = new Note(382.0f, 3, 2, 1, 0);
        Note note2_7708 = new Note(383.0f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_7708.isDD(note2_7708));
        Note note1_3730 = new Note(382.5f, 3, 2, 1, 5);
        Note note2_3730 = new Note(383.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_3730.isDD(note2_3730));
        Note note1_9070 = new Note(383.0f, 3, 1, 1, 1);
        Note note2_9070 = new Note(384.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_9070.isDD(note2_9070));
        Note note1_6467 = new Note(383.5f, 2, 0, 1, 1);
        Note note2_6467 = new Note(384.5f, 2, 0, 1, 0);
        Assertions.assertFalse(note1_6467.isDD(note2_6467));
        Note note1_4381 = new Note(384.0f, 3, 1, 1, 0);
        Note note2_4381 = new Note(385.0f, 3, 2, 1, 0);
        Assertions.assertTrue(note1_4381.isDD(note2_4381));
        Note note1_4035 = new Note(384.0f, 3, 1, 1, 0);
        Note note2_4035 = new Note(385.0f, 1, 0, 1, 1);
        Assertions.assertFalse(note1_4035.isDD(note2_4035));
        Note note1_9736 = new Note(384.0f, 3, 1, 1, 0);
        Note note2_9736 = new Note(385.0f, 2, 0, 1, 6);
        Assertions.assertFalse(note1_9736.isDD(note2_9736));
        Note note1_5825 = new Note(384.5f, 2, 0, 1, 0);
        Note note2_5825 = new Note(385.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_5825.isDD(note2_5825));
        Note note1_4543 = new Note(385.0f, 2, 0, 1, 6);
        Note note2_4543 = new Note(386.0f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_4543.isDD(note2_4543));
        Note note1_6802 = new Note(385.5f, 2, 0, 1, 1);
        Note note2_6802 = new Note(386.5f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_6802.isDD(note2_6802));
        Note note1_5224 = new Note(386.0f, 3, 2, 1, 5);
        Note note2_5224 = new Note(387.0f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_5224.isDD(note2_5224));
        Note note1_4495 = new Note(386.5f, 3, 2, 1, 0);
        Note note2_4495 = new Note(387.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_4495.isDD(note2_4495));
        Note note1_836 = new Note(387.0f, 3, 0, 1, 1);
        Note note2_836 = new Note(388.0f, 3, 1, 1, 1);
        Assertions.assertTrue(note1_836.isDD(note2_836));
        Note note1_8806 = new Note(387.0f, 3, 0, 1, 1);
        Note note2_8806 = new Note(388.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_8806.isDD(note2_8806));
        Note note1_6595 = new Note(387.5f, 3, 0, 1, 1);
        Note note2_6595 = new Note(388.5f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_6595.isDD(note2_6595));
        Note note1_2603 = new Note(388.0f, 3, 1, 1, 0);
        Note note2_2603 = new Note(389.0f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_2603.isDD(note2_2603));
        Note note1_5437 = new Note(388.5f, 2, 2, 1, 0);
        Note note2_5437 = new Note(389.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_5437.isDD(note2_5437));
        Note note1_4487 = new Note(389.0f, 2, 0, 1, 1);
        Note note2_4487 = new Note(390.0f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_4487.isDD(note2_4487));
        Note note1_698 = new Note(389.5f, 3, 0, 1, 1);
        Note note2_698 = new Note(390.5f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_698.isDD(note2_698));
        Note note1_7521 = new Note(390.0f, 3, 2, 1, 0);
        Note note2_7521 = new Note(391.0f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_7521.isDD(note2_7521));
        Note note1_8926 = new Note(390.5f, 3, 2, 1, 0);
        Note note2_8926 = new Note(391.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_8926.isDD(note2_8926));
        Note note1_4560 = new Note(391.0f, 2, 0, 1, 1);
        Note note2_4560 = new Note(392.0f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_4560.isDD(note2_4560));
        Note note1_8444 = new Note(391.5f, 3, 0, 1, 1);
        Note note2_8444 = new Note(392.5f, 3, 0, 1, 0);
        Assertions.assertFalse(note1_8444.isDD(note2_8444));
        Note note1_1078 = new Note(392.0f, 2, 2, 1, 0);
        Note note2_1078 = new Note(393.0f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_1078.isDD(note2_1078));
        Note note1_2739 = new Note(392.5f, 3, 0, 1, 0);
        Note note2_2739 = new Note(393.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_2739.isDD(note2_2739));
        Note note1_591 = new Note(393.0f, 2, 0, 1, 1);
        Note note2_591 = new Note(394.0f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_591.isDD(note2_591));
        Note note1_3055 = new Note(393.5f, 3, 0, 1, 1);
        Note note2_3055 = new Note(394.5f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_3055.isDD(note2_3055));
        Note note1_1820 = new Note(394.0f, 3, 1, 1, 5);
        Note note2_1820 = new Note(395.0f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_1820.isDD(note2_1820));
        Note note1_3818 = new Note(394.5f, 3, 1, 1, 0);
        Note note2_3818 = new Note(395.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_3818.isDD(note2_3818));
        Note note1_2872 = new Note(395.0f, 2, 0, 1, 1);
        Note note2_2872 = new Note(400.0f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_2872.isDD(note2_2872));
        Note note1_5471 = new Note(395.5f, 2, 0, 1, 1);
        Note note2_5471 = new Note(401.0f, 2, 0, 1, 1);
        Assertions.assertTrue(note1_5471.isDD(note2_5471));
        Note note1_3501 = new Note(395.5f, 2, 0, 1, 1);
        Note note2_3501 = new Note(401.0f, 2, 0, 1, 1);
        Assertions.assertTrue(note1_3501.isDD(note2_3501));
        Note note1_6904 = new Note(395.5f, 2, 0, 1, 1);
        Note note2_6904 = new Note(401.0f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_6904.isDD(note2_6904));
        Note note1_5041 = new Note(400.0f, 2, 2, 1, 0);
        Note note2_5041 = new Note(402.0f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_5041.isDD(note2_5041));
        Note note1_2402 = new Note(401.0f, 3, 1, 1, 5);
        Note note2_2402 = new Note(403.0f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_2402.isDD(note2_2402));
        Note note1_8209 = new Note(402.0f, 3, 1, 1, 1);
        Note note2_8209 = new Note(404.0f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_8209.isDD(note2_8209));
        Note note1_2879 = new Note(403.0f, 2, 0, 1, 1);
        Note note2_2879 = new Note(405.0f, 2, 0, 1, 0);
        Assertions.assertFalse(note1_2879.isDD(note2_2879));
        Note note1_420 = new Note(404.0f, 3, 2, 1, 0);
        Note note2_420 = new Note(406.0f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_420.isDD(note2_420));
        Note note1_9499 = new Note(405.0f, 2, 0, 1, 0);
        Note note2_9499 = new Note(407.0f, 3, 1, 1, 7);
        Assertions.assertFalse(note1_9499.isDD(note2_9499));
        Note note1_954 = new Note(406.0f, 3, 1, 1, 1);
        Note note2_954 = new Note(408.0f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_954.isDD(note2_954));
    }


    @Test
    void equalPlacement() {
        Note note1_6629 = new Note(160.0f, 1, 0, 1, 1);
        Note note2_6629 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_6629.equalPlacement(note2_6629));
        Note note1_4833 = new Note(164.0f, 2, 1, 1, 2);
        Note note2_4833 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_4833.equalPlacement(note2_4833));
        Note note1_303 = new Note(165.0f, 2, 1, 1, 3);
        Note note2_303 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_303.equalPlacement(note2_303));
        Note note1_3813 = new Note(171.25f, 0, 0, 1, 8);
        Note note2_3813 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_3813.equalPlacement(note2_3813));
        Note note1_677 = new Note(185.0f, 3, 0, 1, 0);
        Note note2_677 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_677.equalPlacement(note2_677));
        Note note1_4107 = new Note(193.0f, 1, 0, 1, 0);
        Note note2_4107 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_4107.equalPlacement(note2_4107));
        Note note1_6738 = new Note(231.0f, 2, 0, 1, 8);
        Note note2_6738 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertFalse(note1_6738.equalPlacement(note2_6738));
        Note note1_9355 = new Note(246.0f, 3, 1, 1, 2);
        Note note2_9355 = new Note(401.0f, 3, 1, 1, 2);
        Assertions.assertTrue(note1_9355.equalPlacement(note2_9355));
        Note note1_8228 = new Note(248.0f, 3, 0, 1, 7);
        Note note2_8228 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_8228.equalPlacement(note2_8228));
        Note note1_1113 = new Note(335.0f, 2, 0, 1, 1);
        Note note2_1113 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_1113.equalPlacement(note2_1113));
        Note note1_7683 = new Note(8.0f, 2, 0, 1, 1);
        Note note2_7683 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_7683.equalPlacement(note2_7683));
        Note note1_2974 = new Note(10.0f, 3, 2, 1, 5);
        Note note2_2974 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_2974.equalPlacement(note2_2974));
        Note note1_5784 = new Note(12.0f, 1, 0, 1, 6);
        Note note2_5784 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_5784.equalPlacement(note2_5784));
        Note note1_802 = new Note(18.0f, 1, 2, 1, 4);
        Note note2_802 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_802.equalPlacement(note2_802));
        Note note1_7375 = new Note(26.0f, 1, 2, 1, 0);
        Note note2_7375 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_7375.equalPlacement(note2_7375));
        Note note1_5833 = new Note(32.0f, 3, 0, 1, 7);
        Note note2_5833 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_5833.equalPlacement(note2_5833));
        Note note1_8392 = new Note(34.0f, 2, 2, 1, 0);
        Note note2_8392 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_8392.equalPlacement(note2_8392));
        Note note1_8617 = new Note(40.0f, 2, 2, 1, 7);
        Note note2_8617 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_8617.equalPlacement(note2_8617));
        Note note1_3358 = new Note(40.0f, 3, 1, 1, 7);
        Note note2_3358 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_3358.equalPlacement(note2_3358));
        Note note1_3588 = new Note(41.0f, 1, 2, 1, 2);
        Note note2_3588 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_3588.equalPlacement(note2_3588));
        Note note1_6819 = new Note(43.0f, 2, 2, 1, 3);
        Note note2_6819 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_6819.equalPlacement(note2_6819));
        Note note1_9807 = new Note(47.0f, 2, 0, 1, 7);
        Note note2_9807 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_9807.equalPlacement(note2_9807));
        Note note1_2705 = new Note(48.0f, 2, 2, 1, 4);
        Note note2_2705 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_2705.equalPlacement(note2_2705));
        Note note1_7579 = new Note(52.0f, 3, 2, 1, 0);
        Note note2_7579 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_7579.equalPlacement(note2_7579));
        Note note1_9044 = new Note(56.0f, 3, 1, 1, 5);
        Note note2_9044 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_9044.equalPlacement(note2_9044));
        Note note1_6941 = new Note(57.0f, 1, 0, 1, 2);
        Note note2_6941 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_6941.equalPlacement(note2_6941));
        Note note1_5540 = new Note(59.0f, 3, 1, 1, 3);
        Note note2_5540 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_5540.equalPlacement(note2_5540));
        Note note1_7968 = new Note(60.0f, 2, 0, 1, 6);
        Note note2_7968 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_7968.equalPlacement(note2_7968));
        Note note1_6674 = new Note(82.0f, 3, 1, 1, 0);
        Note note2_6674 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_6674.equalPlacement(note2_6674));
        Note note1_8035 = new Note(84.0f, 3, 0, 1, 1);
        Note note2_8035 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_8035.equalPlacement(note2_8035));
        Note note1_6556 = new Note(84.0f, 3, 1, 1, 1);
        Note note2_6556 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertFalse(note1_6556.equalPlacement(note2_6556));
        Note note1_2556 = new Note(112.0f, 0, 0, 1, 2);
        Note note2_2556 = new Note(402.0f, 0, 0, 1, 2);
        Assertions.assertTrue(note1_2556.equalPlacement(note2_2556));
        Note note1_7124 = new Note(113.0f, 3, 1, 1, 3);
        Note note2_7124 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_7124.equalPlacement(note2_7124));
        Note note1_1538 = new Note(8.0f, 2, 0, 1, 1);
        Note note2_1538 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_1538.equalPlacement(note2_1538));
        Note note1_8440 = new Note(10.0f, 3, 2, 1, 5);
        Note note2_8440 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8440.equalPlacement(note2_8440));
        Note note1_184 = new Note(12.0f, 1, 0, 1, 6);
        Note note2_184 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_184.equalPlacement(note2_184));
        Note note1_3158 = new Note(18.0f, 1, 2, 1, 4);
        Note note2_3158 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_3158.equalPlacement(note2_3158));
        Note note1_4167 = new Note(26.0f, 1, 2, 1, 0);
        Note note2_4167 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4167.equalPlacement(note2_4167));
        Note note1_1763 = new Note(32.0f, 3, 0, 1, 7);
        Note note2_1763 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_1763.equalPlacement(note2_1763));
        Note note1_7828 = new Note(34.0f, 2, 2, 1, 0);
        Note note2_7828 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_7828.equalPlacement(note2_7828));
        Note note1_9500 = new Note(40.0f, 2, 2, 1, 7);
        Note note2_9500 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9500.equalPlacement(note2_9500));
        Note note1_1708 = new Note(40.0f, 3, 1, 1, 7);
        Note note2_1708 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_1708.equalPlacement(note2_1708));
        Note note1_4048 = new Note(41.0f, 1, 2, 1, 2);
        Note note2_4048 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4048.equalPlacement(note2_4048));
        Note note1_6679 = new Note(43.0f, 2, 2, 1, 3);
        Note note2_6679 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_6679.equalPlacement(note2_6679));
        Note note1_4295 = new Note(47.0f, 2, 0, 1, 7);
        Note note2_4295 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4295.equalPlacement(note2_4295));
        Note note1_8289 = new Note(48.0f, 2, 2, 1, 4);
        Note note2_8289 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8289.equalPlacement(note2_8289));
        Note note1_952 = new Note(52.0f, 3, 2, 1, 0);
        Note note2_952 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_952.equalPlacement(note2_952));
        Note note1_9305 = new Note(56.0f, 3, 1, 1, 5);
        Note note2_9305 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9305.equalPlacement(note2_9305));
        Note note1_2846 = new Note(57.0f, 1, 0, 1, 2);
        Note note2_2846 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_2846.equalPlacement(note2_2846));
        Note note1_4696 = new Note(59.0f, 3, 1, 1, 3);
        Note note2_4696 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4696.equalPlacement(note2_4696));
        Note note1_7576 = new Note(60.0f, 2, 0, 1, 6);
        Note note2_7576 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_7576.equalPlacement(note2_7576));
        Note note1_9266 = new Note(82.0f, 3, 1, 1, 0);
        Note note2_9266 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9266.equalPlacement(note2_9266));
        Note note1_7868 = new Note(84.0f, 3, 0, 1, 1);
        Note note2_7868 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_7868.equalPlacement(note2_7868));
        Note note1_9331 = new Note(84.0f, 3, 1, 1, 1);
        Note note2_9331 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9331.equalPlacement(note2_9331));
        Note note1_722 = new Note(112.0f, 0, 0, 1, 2);
        Note note2_722 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_722.equalPlacement(note2_722));
        Note note1_9006 = new Note(126.0f, 0, 1, 1, 2);
        Note note2_9006 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9006.equalPlacement(note2_9006));
        Note note1_2479 = new Note(128.0f, 0, 0, 1, 6);
        Note note2_2479 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_2479.equalPlacement(note2_2479));
        Note note1_3720 = new Note(130.0f, 0, 2, 1, 4);
        Note note2_3720 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_3720.equalPlacement(note2_3720));
        Note note1_3856 = new Note(138.0f, 2, 0, 1, 3);
        Note note2_3856 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_3856.equalPlacement(note2_3856));
        Note note1_988 = new Note(138.0f, 3, 0, 1, 3);
        Note note2_988 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_988.equalPlacement(note2_988));
        Note note1_9701 = new Note(160.0f, 1, 0, 1, 1);
        Note note2_9701 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9701.equalPlacement(note2_9701));
        Note note1_7962 = new Note(165.0f, 2, 1, 1, 3);
        Note note2_7962 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_7962.equalPlacement(note2_7962));
        Note note1_6145 = new Note(171.25f, 0, 0, 1, 8);
        Note note2_6145 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_6145.equalPlacement(note2_6145));
        Note note1_8762 = new Note(185.0f, 3, 0, 1, 0);
        Note note2_8762 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8762.equalPlacement(note2_8762));
        Note note1_9457 = new Note(193.0f, 1, 0, 1, 0);
        Note note2_9457 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_9457.equalPlacement(note2_9457));
        Note note1_1482 = new Note(231.0f, 2, 0, 1, 8);
        Note note2_1482 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_1482.equalPlacement(note2_1482));
        Note note1_6440 = new Note(246.0f, 3, 1, 1, 2);
        Note note2_6440 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_6440.equalPlacement(note2_6440));
        Note note1_8426 = new Note(252.0f, 2, 2, 1, 1);
        Note note2_8426 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8426.equalPlacement(note2_8426));
        Note note1_4018 = new Note(301.0f, 2, 0, 1, 2);
        Note note2_4018 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4018.equalPlacement(note2_4018));
        Note note1_3324 = new Note(302.0f, 0, 0, 1, 0);
        Note note2_3324 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_3324.equalPlacement(note2_3324));
        Note note1_4169 = new Note(302.0f, 0, 1, 1, 0);
        Note note2_4169 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4169.equalPlacement(note2_4169));
        Note note1_6986 = new Note(303.0f, 1, 2, 1, 3);
        Note note2_6986 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_6986.equalPlacement(note2_6986));
        Note note1_4596 = new Note(317.0f, 1, 1, 1, 6);
        Note note2_4596 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4596.equalPlacement(note2_4596));
        Note note1_4479 = new Note(317.0f, 2, 2, 1, 6);
        Note note2_4479 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4479.equalPlacement(note2_4479));
        Note note1_8295 = new Note(318.0f, 1, 0, 1, 3);
        Note note2_8295 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8295.equalPlacement(note2_8295));
        Note note1_2652 = new Note(320.0f, 2, 2, 1, 2);
        Note note2_2652 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_2652.equalPlacement(note2_2652));
        Note note1_4532 = new Note(321.0f, 1, 1, 1, 7);
        Note note2_4532 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_4532.equalPlacement(note2_4532));
        Note note1_8591 = new Note(345.0f, 2, 2, 1, 8);
        Note note2_8591 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8591.equalPlacement(note2_8591));
        Note note1_1426 = new Note(347.0f, 2, 0, 1, 0);
        Note note2_1426 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_1426.equalPlacement(note2_1426));
        Note note1_8664 = new Note(363.0f, 1, 0, 1, 8);
        Note note2_8664 = new Note(403.0f, 0, 0, 1, 3);
        Assertions.assertFalse(note1_8664.equalPlacement(note2_8664));
        Note note1_4031 = new Note(8.0f, 2, 0, 1, 1);
        Note note2_4031 = new Note(404.0f, 2, 0, 1, 1);
        Assertions.assertTrue(note1_4031.equalPlacement(note2_4031));
        Note note1_9803 = new Note(10.0f, 3, 2, 1, 5);
        Note note2_9803 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_9803.equalPlacement(note2_9803));
        Note note1_1770 = new Note(18.0f, 1, 2, 1, 4);
        Note note2_1770 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_1770.equalPlacement(note2_1770));
        Note note1_9612 = new Note(52.0f, 3, 2, 1, 0);
        Note note2_9612 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_9612.equalPlacement(note2_9612));
        Note note1_333 = new Note(64.0f, 1, 2, 1, 0);
        Note note2_333 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertTrue(note1_333.equalPlacement(note2_333));
        Note note1_4938 = new Note(8.0f, 2, 0, 1, 1);
        Note note2_4938 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_4938.equalPlacement(note2_4938));
        Note note1_3152 = new Note(10.0f, 3, 2, 1, 5);
        Note note2_3152 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_3152.equalPlacement(note2_3152));
        Note note1_2469 = new Note(12.0f, 1, 0, 1, 6);
        Note note2_2469 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_2469.equalPlacement(note2_2469));
        Note note1_9488 = new Note(18.0f, 1, 2, 1, 4);
        Note note2_9488 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertFalse(note1_9488.equalPlacement(note2_9488));
        Note note1_6826 = new Note(26.0f, 1, 2, 1, 0);
        Note note2_6826 = new Note(405.0f, 1, 2, 1, 0);
        Assertions.assertTrue(note1_6826.equalPlacement(note2_6826));
        Note note1_2225 = new Note(28.0f, 2, 0, 1, 1);
        Note note2_2225 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_2225.equalPlacement(note2_2225));
        Note note1_5462 = new Note(65.0f, 3, 0, 1, 7);
        Note note2_5462 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertTrue(note1_5462.equalPlacement(note2_5462));
        Note note1_7584 = new Note(8.0f, 2, 0, 1, 1);
        Note note2_7584 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_7584.equalPlacement(note2_7584));
        Note note1_4256 = new Note(10.0f, 3, 2, 1, 5);
        Note note2_4256 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_4256.equalPlacement(note2_4256));
        Note note1_7355 = new Note(12.0f, 1, 0, 1, 6);
        Note note2_7355 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_7355.equalPlacement(note2_7355));
        Note note1_3494 = new Note(18.0f, 1, 2, 1, 4);
        Note note2_3494 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_3494.equalPlacement(note2_3494));
        Note note1_5650 = new Note(26.0f, 1, 2, 1, 0);
        Note note2_5650 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertFalse(note1_5650.equalPlacement(note2_5650));
        Note note1_9196 = new Note(32.0f, 3, 0, 1, 7);
        Note note2_9196 = new Note(406.0f, 3, 0, 1, 7);
        Assertions.assertTrue(note1_9196.equalPlacement(note2_9196));
        Note note1_6765 = new Note(34.0f, 2, 2, 1, 0);
        Note note2_6765 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_6765.equalPlacement(note2_6765));
        Note note1_7709 = new Note(67.0f, 1, 2, 1, 2);
        Note note2_7709 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_7709.equalPlacement(note2_7709));
        Note note1_3716 = new Note(122.0f, 3, 2, 1, 5);
        Note note2_3716 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_3716.equalPlacement(note2_3716));
        Note note1_9975 = new Note(246.0f, 3, 1, 1, 2);
        Note note2_9975 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_9975.equalPlacement(note2_9975));
        Note note1_9922 = new Note(250.0f, 3, 1, 1, 0);
        Note note2_9922 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_9922.equalPlacement(note2_9922));
        Note note1_7272 = new Note(287.0f, 0, 2, 1, 4);
        Note note2_7272 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_7272.equalPlacement(note2_7272));
        Note note1_6713 = new Note(8.0f, 2, 0, 1, 1);
        Note note2_6713 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_6713.equalPlacement(note2_6713));
        Note note1_9 = new Note(10.0f, 3, 2, 1, 5);
        Note note2_9 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_9.equalPlacement(note2_9));
        Note note1_277 = new Note(12.0f, 1, 0, 1, 6);
        Note note2_277 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_277.equalPlacement(note2_277));
        Note note1_2891 = new Note(18.0f, 1, 2, 1, 4);
        Note note2_2891 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_2891.equalPlacement(note2_2891));
        Note note1_2855 = new Note(26.0f, 1, 2, 1, 0);
        Note note2_2855 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_2855.equalPlacement(note2_2855));
        Note note1_9269 = new Note(32.0f, 3, 0, 1, 7);
        Note note2_9269 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_9269.equalPlacement(note2_9269));
        Note note1_5296 = new Note(34.0f, 2, 2, 1, 0);
        Note note2_5296 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_5296.equalPlacement(note2_5296));
        Note note1_4346 = new Note(40.0f, 2, 2, 1, 7);
        Note note2_4346 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_4346.equalPlacement(note2_4346));
        Note note1_73 = new Note(40.0f, 3, 1, 1, 7);
        Note note2_73 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_73.equalPlacement(note2_73));
        Note note1_3592 = new Note(41.0f, 1, 2, 1, 2);
        Note note2_3592 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_3592.equalPlacement(note2_3592));
        Note note1_237 = new Note(43.0f, 2, 2, 1, 3);
        Note note2_237 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_237.equalPlacement(note2_237));
        Note note1_8950 = new Note(47.0f, 2, 0, 1, 7);
        Note note2_8950 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_8950.equalPlacement(note2_8950));
        Note note1_9608 = new Note(48.0f, 2, 2, 1, 4);
        Note note2_9608 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_9608.equalPlacement(note2_9608));
        Note note1_9385 = new Note(52.0f, 3, 2, 1, 0);
        Note note2_9385 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_9385.equalPlacement(note2_9385));
        Note note1_435 = new Note(57.0f, 1, 0, 1, 2);
        Note note2_435 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_435.equalPlacement(note2_435));
        Note note1_7761 = new Note(59.0f, 3, 1, 1, 3);
        Note note2_7761 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_7761.equalPlacement(note2_7761));
        Note note1_3314 = new Note(60.0f, 2, 0, 1, 6);
        Note note2_3314 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_3314.equalPlacement(note2_3314));
        Note note1_2814 = new Note(82.0f, 3, 1, 1, 0);
        Note note2_2814 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_2814.equalPlacement(note2_2814));
        Note note1_1042 = new Note(84.0f, 3, 0, 1, 1);
        Note note2_1042 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_1042.equalPlacement(note2_1042));
        Note note1_7144 = new Note(84.0f, 3, 1, 1, 1);
        Note note2_7144 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_7144.equalPlacement(note2_7144));
        Note note1_1822 = new Note(112.0f, 0, 0, 1, 2);
        Note note2_1822 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertFalse(note1_1822.equalPlacement(note2_1822));
        Note note1_8774 = new Note(126.0f, 0, 1, 1, 2);
        Note note2_8774 = new Note(407.0f, 0, 1, 1, 2);
        Assertions.assertTrue(note1_8774.equalPlacement(note2_8774));
        Note note1_8873 = new Note(128.0f, 0, 0, 1, 6);
        Note note2_8873 = new Note(408.0f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_8873.equalPlacement(note2_8873));
        Note note1_1360 = new Note(154.0f, 3, 0, 1, 7);
        Note note2_1360 = new Note(408.0f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_1360.equalPlacement(note2_1360));
        Note note1_1937 = new Note(280.0f, 3, 1, 1, 3);
        Note note2_1937 = new Note(408.0f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_1937.equalPlacement(note2_1937));
        Note note1_4744 = new Note(380.0f, 3, 0, 1, 1);
        Note note2_4744 = new Note(408.0f, 3, 2, 1, 5);
        Assertions.assertFalse(note1_4744.equalPlacement(note2_4744));
    }


    @Test
    void equalNotePlacement() {
        Note note1_467 = new Note(255.5f, 2, 0, 0, 0);
        Note note2_467 = new Note(255.5f, 2, 2, 1, 1);
        Assertions.assertFalse(note1_467.equalNotePlacement(note2_467));
        Note note1_6973 = new Note(256.5f, 0, 0, 0, 6);
        Note note2_6973 = new Note(256.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_6973.equalNotePlacement(note2_6973));
        Note note1_4403 = new Note(257.5f, 1, 2, 0, 0);
        Note note2_4403 = new Note(257.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_4403.equalNotePlacement(note2_4403));
        Note note1_273 = new Note(258.5f, 0, 0, 0, 1);
        Note note2_273 = new Note(258.5f, 1, 0, 1, 6);
        Assertions.assertFalse(note1_273.equalNotePlacement(note2_273));
        Note note1_690 = new Note(259.5f, 0, 2, 0, 0);
        Note note2_690 = new Note(259.5f, 2, 0, 1, 6);
        Assertions.assertFalse(note1_690.equalNotePlacement(note2_690));
        Note note1_9989 = new Note(260.5f, 1, 0, 0, 1);
        Note note2_9989 = new Note(260.5f, 1, 2, 1, 2);
        Assertions.assertFalse(note1_9989.equalNotePlacement(note2_9989));
        Note note1_4955 = new Note(261.5f, 1, 2, 0, 0);
        Note note2_4955 = new Note(261.5f, 2, 2, 1, 2);
        Assertions.assertFalse(note1_4955.equalNotePlacement(note2_4955));
        Note note1_5146 = new Note(262.5f, 2, 0, 0, 7);
        Note note2_5146 = new Note(262.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_5146.equalNotePlacement(note2_5146));
        Note note1_9617 = new Note(263.5f, 0, 2, 0, 4);
        Note note2_9617 = new Note(263.5f, 3, 1, 1, 1);
        Assertions.assertFalse(note1_9617.equalNotePlacement(note2_9617));
        Note note1_9095 = new Note(264.5f, 0, 0, 0, 1);
        Note note2_9095 = new Note(264.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_9095.equalNotePlacement(note2_9095));
        Note note1_3713 = new Note(279.0f, 3, 1, 1, 5);
        Note note2_3713 = new Note(279.0f, 1, 2, 0, 5);
        Assertions.assertFalse(note1_3713.equalNotePlacement(note2_3713));
        Note note1_2404 = new Note(280.0f, 2, 0, 1, 0);
        Note note2_2404 = new Note(280.0f, 2, 0, 0, 0);
        Assertions.assertTrue(note1_2404.equalNotePlacement(note2_2404));
        Note note1_5997 = new Note(281.0f, 3, 0, 1, 1);
        Note note2_5997 = new Note(281.0f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_5997.equalNotePlacement(note2_5997));
        Note note1_6649 = new Note(282.0f, 3, 2, 1, 0);
        Note note2_6649 = new Note(282.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_6649.equalNotePlacement(note2_6649));
        Note note1_3975 = new Note(283.0f, 3, 0, 1, 1);
        Note note2_3975 = new Note(283.0f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_3975.equalNotePlacement(note2_3975));
        Note note1_4402 = new Note(284.0f, 3, 2, 1, 0);
        Note note2_4402 = new Note(284.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_4402.equalNotePlacement(note2_4402));
        Note note1_4669 = new Note(285.0f, 3, 0, 1, 1);
        Note note2_4669 = new Note(285.0f, 2, 0, 0, 0);
        Assertions.assertFalse(note1_4669.equalNotePlacement(note2_4669));
        Note note1_8739 = new Note(286.0f, 2, 0, 1, 0);
        Note note2_8739 = new Note(286.0f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_8739.equalNotePlacement(note2_8739));
        Note note1_4143 = new Note(287.0f, 2, 0, 1, 1);
        Note note2_4143 = new Note(287.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_4143.equalNotePlacement(note2_4143));
        Note note1_415 = new Note(288.0f, 2, 2, 1, 0);
        Note note2_415 = new Note(288.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_415.equalNotePlacement(note2_415));
        Note note1_8129 = new Note(289.0f, 1, 0, 1, 6);
        Note note2_8129 = new Note(289.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_8129.equalNotePlacement(note2_8129));
        Note note1_5554 = new Note(290.0f, 2, 2, 1, 5);
        Note note2_5554 = new Note(290.0f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_5554.equalNotePlacement(note2_5554));
        Note note1_1737 = new Note(291.0f, 1, 0, 1, 6);
        Note note2_1737 = new Note(291.0f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_1737.equalNotePlacement(note2_1737));
        Note note1_3842 = new Note(292.0f, 3, 1, 1, 5);
        Note note2_3842 = new Note(292.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_3842.equalNotePlacement(note2_3842));
        Note note1_3555 = new Note(319.5f, 1, 0, 0, 1);
        Note note2_3555 = new Note(319.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_3555.equalNotePlacement(note2_3555));
        Note note1_2920 = new Note(320.5f, 0, 2, 0, 4);
        Note note2_2920 = new Note(320.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_2920.equalNotePlacement(note2_2920));
        Note note1_4532 = new Note(321.5f, 1, 0, 0, 1);
        Note note2_4532 = new Note(321.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_4532.equalNotePlacement(note2_4532));
        Note note1_866 = new Note(322.5f, 1, 2, 0, 0);
        Note note2_866 = new Note(322.5f, 1, 0, 1, 1);
        Assertions.assertFalse(note1_866.equalNotePlacement(note2_866));
        Note note1_3133 = new Note(323.5f, 2, 0, 0, 7);
        Note note2_3133 = new Note(323.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_3133.equalNotePlacement(note2_3133));
        Note note1_6593 = new Note(324.5f, 1, 2, 0, 0);
        Note note2_6593 = new Note(324.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_6593.equalNotePlacement(note2_6593));
        Note note1_99 = new Note(325.5f, 1, 0, 0, 1);
        Note note2_99 = new Note(325.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_99.equalNotePlacement(note2_99));
        Note note1_1464 = new Note(326.5f, 1, 2, 0, 0);
        Note note2_1464 = new Note(326.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_1464.equalNotePlacement(note2_1464));
        Note note1_758 = new Note(327.5f, 1, 0, 0, 1);
        Note note2_758 = new Note(327.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_758.equalNotePlacement(note2_758));
        Note note1_4728 = new Note(328.5f, 1, 2, 0, 0);
        Note note2_4728 = new Note(328.5f, 1, 0, 1, 6);
        Assertions.assertFalse(note1_4728.equalNotePlacement(note2_4728));
        Note note1_9894 = new Note(329.5f, 1, 0, 0, 1);
        Note note2_9894 = new Note(329.5f, 3, 0, 1, 1);
        Assertions.assertFalse(note1_9894.equalNotePlacement(note2_9894));
        Note note1_7038 = new Note(330.5f, 0, 0, 0, 0);
        Note note2_7038 = new Note(330.5f, 2, 0, 1, 1);
        Assertions.assertFalse(note1_7038.equalNotePlacement(note2_7038));
        Note note1_7381 = new Note(331.5f, 0, 0, 0, 1);
        Note note2_7381 = new Note(331.5f, 1, 0, 1, 1);
        Assertions.assertFalse(note1_7381.equalNotePlacement(note2_7381));
        Note note1_1655 = new Note(332.5f, 0, 1, 0, 0);
        Note note2_1655 = new Note(332.5f, 1, 0, 1, 1);
        Assertions.assertFalse(note1_1655.equalNotePlacement(note2_1655));
        Note note1_9941 = new Note(349.0f, 3, 1, 1, 0);
        Note note2_9941 = new Note(349.0f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_9941.equalNotePlacement(note2_9941));
        Note note1_3401 = new Note(350.0f, 2, 0, 1, 1);
        Note note2_3401 = new Note(350.0f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_3401.equalNotePlacement(note2_3401));
        Note note1_8822 = new Note(351.0f, 2, 2, 1, 0);
        Note note2_8822 = new Note(351.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_8822.equalNotePlacement(note2_8822));
        Note note1_5186 = new Note(352.0f, 1, 0, 1, 6);
        Note note2_5186 = new Note(352.0f, 0, 1, 0, 2);
        Assertions.assertFalse(note1_5186.equalNotePlacement(note2_5186));
        Note note1_5115 = new Note(353.0f, 3, 2, 1, 5);
        Note note2_5115 = new Note(353.0f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_5115.equalNotePlacement(note2_5115));
        Note note1_5050 = new Note(354.0f, 3, 0, 1, 1);
        Note note2_5050 = new Note(354.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_5050.equalNotePlacement(note2_5050));
        Note note1_2015 = new Note(355.0f, 3, 2, 1, 0);
        Note note2_2015 = new Note(355.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_2015.equalNotePlacement(note2_2015));
        Note note1_9436 = new Note(356.0f, 2, 0, 1, 1);
        Note note2_9436 = new Note(356.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_9436.equalNotePlacement(note2_9436));
        Note note1_751 = new Note(357.0f, 2, 2, 1, 0);
        Note note2_751 = new Note(357.0f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_751.equalNotePlacement(note2_751));
        Note note1_4481 = new Note(358.0f, 2, 0, 1, 1);
        Note note2_4481 = new Note(358.0f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_4481.equalNotePlacement(note2_4481));
        Note note1_4330 = new Note(359.0f, 3, 1, 1, 5);
        Note note2_4330 = new Note(359.0f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_4330.equalNotePlacement(note2_4330));
        Note note1_353 = new Note(360.0f, 2, 0, 1, 6);
        Note note2_353 = new Note(360.0f, 0, 0, 0, 0);
        Assertions.assertFalse(note1_353.equalNotePlacement(note2_353));
        Note note1_864 = new Note(361.5f, 3, 2, 1, 5);
        Note note2_864 = new Note(361.5f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_864.equalNotePlacement(note2_864));
        Note note1_9197 = new Note(362.5f, 1, 0, 1, 6);
        Note note2_9197 = new Note(362.5f, 1, 2, 0, 5);
        Assertions.assertFalse(note1_9197.equalNotePlacement(note2_9197));
        Note note1_2279 = new Note(376.5f, 1, 2, 0, 5);
        Note note2_2279 = new Note(376.5f, 3, 2, 1, 0);
        Assertions.assertFalse(note1_2279.equalNotePlacement(note2_2279));
        Note note1_2881 = new Note(377.5f, 1, 0, 0, 1);
        Note note2_2881 = new Note(377.5f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_2881.equalNotePlacement(note2_2881));
        Note note1_7756 = new Note(378.5f, 0, 2, 0, 4);
        Note note2_7756 = new Note(378.5f, 1, 0, 1, 5);
        Assertions.assertFalse(note1_7756.equalNotePlacement(note2_7756));
        Note note1_8376 = new Note(379.5f, 0, 0, 0, 1);
        Note note2_8376 = new Note(379.5f, 2, 0, 1, 5);
        Assertions.assertFalse(note1_8376.equalNotePlacement(note2_8376));
        Note note1_127 = new Note(380.5f, 0, 1, 0, 0);
        Note note2_127 = new Note(380.5f, 3, 1, 1, 0);
        Assertions.assertFalse(note1_127.equalNotePlacement(note2_127));
        Note note1_6927 = new Note(381.5f, 0, 0, 0, 1);
        Note note2_6927 = new Note(381.5f, 3, 0, 1, 0);
        Assertions.assertFalse(note1_6927.equalNotePlacement(note2_6927));
        Note note1_1809 = new Note(382.5f, 0, 2, 0, 0);
        Note note2_1809 = new Note(382.5f, 3, 0, 1, 0);
        Assertions.assertFalse(note1_1809.equalNotePlacement(note2_1809));
        Note note1_9851 = new Note(383.5f, 1, 0, 0, 1);
        Note note2_9851 = new Note(383.5f, 3, 0, 1, 0);
        Assertions.assertFalse(note1_9851.equalNotePlacement(note2_9851));
        Note note1_5742 = new Note(384.5f, 1, 2, 0, 0);
        Note note2_5742 = new Note(384.5f, 1, 0, 1, 5);
        Assertions.assertFalse(note1_5742.equalNotePlacement(note2_5742));
        Note note1_781 = new Note(385.5f, 0, 0, 0, 1);
        Note note2_781 = new Note(385.5f, 2, 2, 1, 0);
        Assertions.assertFalse(note1_781.equalNotePlacement(note2_781));
        Note note1_7881 = new Note(386.5f, 0, 1, 0, 0);
        Note note2_7881 = new Note(386.5f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_7881.equalNotePlacement(note2_7881));
        Note note1_7551 = new Note(387.5f, 0, 0, 0, 1);
        Note note2_7551 = new Note(387.5f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_7551.equalNotePlacement(note2_7551));
        Note note1_6439 = new Note(388.5f, 0, 1, 0, 0);
        Note note2_6439 = new Note(388.5f, 2, 2, 1, 5);
        Assertions.assertFalse(note1_6439.equalNotePlacement(note2_6439));
        Note note1_8924 = new Note(389.5f, 0, 0, 0, 1);
        Note note2_8924 = new Note(389.5f, 3, 1, 1, 5);
        Assertions.assertFalse(note1_8924.equalNotePlacement(note2_8924));
        Note note1_867 = new Note(405.0f, 2, 0, 1, 1);
        Note note2_867 = new Note(405.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_867.equalNotePlacement(note2_867));
        Note note1_587 = new Note(405.5f, 3, 2, 1, 5);
        Note note2_587 = new Note(405.5f, 0, 0, 0, 1);
        Assertions.assertFalse(note1_587.equalNotePlacement(note2_587));
        Note note1_556 = new Note(406.0f, 2, 0, 1, 1);
        Note note2_556 = new Note(406.0f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_556.equalNotePlacement(note2_556));
        Note note1_8131 = new Note(406.5f, 3, 2, 1, 5);
        Note note2_8131 = new Note(406.5f, 0, 0, 0, 1);
        Assertions.assertFalse(note1_8131.equalNotePlacement(note2_8131));
        Note note1_8917 = new Note(407.0f, 1, 0, 1, 6);
        Note note2_8917 = new Note(407.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_8917.equalNotePlacement(note2_8917));
        Note note1_4552 = new Note(407.5f, 3, 1, 1, 5);
        Note note2_4552 = new Note(407.5f, 0, 0, 0, 1);
        Assertions.assertFalse(note1_4552.equalNotePlacement(note2_4552));
        Note note1_1 = new Note(408.0f, 0, 0, 1, 6);
        Note note2_1 = new Note(408.0f, 1, 0, 0, 0);
        Assertions.assertFalse(note1_1.equalNotePlacement(note2_1));
        Note note1_6827 = new Note(408.5f, 3, 1, 1, 5);
        Note note2_6827 = new Note(408.5f, 0, 0, 0, 6);
        Assertions.assertFalse(note1_6827.equalNotePlacement(note2_6827));
        Note note1_421 = new Note(409.0f, 2, 0, 1, 6);
        Note note2_421 = new Note(409.0f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_421.equalNotePlacement(note2_421));
        Note note1_5952 = new Note(410.0f, 3, 1, 1, 5);
        Note note2_5952 = new Note(410.0f, 2, 0, 0, 7);
        Assertions.assertFalse(note1_5952.equalNotePlacement(note2_5952));
        Note note1_5847 = new Note(411.0f, 1, 0, 1, 6);
        Note note2_5847 = new Note(411.0f, 1, 2, 0, 4);
        Assertions.assertFalse(note1_5847.equalNotePlacement(note2_5847));
        Note note1_6530 = new Note(411.5f, 3, 2, 1, 5);
        Note note2_6530 = new Note(411.5f, 2, 0, 0, 7);
        Assertions.assertFalse(note1_6530.equalNotePlacement(note2_6530));
        Note note1_196 = new Note(412.0f, 2, 0, 1, 1);
        Note note2_196 = new Note(412.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_196.equalNotePlacement(note2_196));
        Note note1_297 = new Note(412.5f, 3, 1, 1, 5);
        Note note2_297 = new Note(412.5f, 1, 0, 0, 7);
        Assertions.assertFalse(note1_297.equalNotePlacement(note2_297));
        Note note1_4113 = new Note(413.0f, 1, 0, 1, 6);
        Note note2_4113 = new Note(413.0f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_4113.equalNotePlacement(note2_4113));
        Note note1_3008 = new Note(413.5f, 3, 1, 1, 5);
        Note note2_3008 = new Note(413.5f, 1, 0, 0, 1);
        Assertions.assertFalse(note1_3008.equalNotePlacement(note2_3008));
        Note note1_313 = new Note(414.0f, 2, 0, 1, 6);
        Note note2_313 = new Note(414.0f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_313.equalNotePlacement(note2_313));
        Note note1_5895 = new Note(414.5f, 3, 2, 1, 5);
        Note note2_5895 = new Note(414.5f, 0, 0, 0, 1);
        Assertions.assertFalse(note1_5895.equalNotePlacement(note2_5895));
        Note note1_9791 = new Note(415.0f, 0, 0, 1, 6);
        Note note2_9791 = new Note(415.0f, 1, 0, 0, 0);
        Assertions.assertFalse(note1_9791.equalNotePlacement(note2_9791));
        Note note1_8240 = new Note(415.5f, 3, 1, 1, 5);
        Note note2_8240 = new Note(415.5f, 1, 0, 0, 7);
        Assertions.assertFalse(note1_8240.equalNotePlacement(note2_8240));
        Note note1_8453 = new Note(416.0f, 2, 0, 1, 6);
        Note note2_8453 = new Note(416.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_8453.equalNotePlacement(note2_8453));
        Note note1_6165 = new Note(416.5f, 3, 2, 1, 0);
        Note note2_6165 = new Note(416.5f, 2, 0, 0, 7);
        Assertions.assertFalse(note1_6165.equalNotePlacement(note2_6165));
        Note note1_1067 = new Note(417.0f, 3, 0, 1, 1);
        Note note2_1067 = new Note(417.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_1067.equalNotePlacement(note2_1067));
        Note note1_2695 = new Note(417.5f, 3, 2, 1, 0);
        Note note2_2695 = new Note(417.5f, 2, 0, 0, 7);
        Assertions.assertFalse(note1_2695.equalNotePlacement(note2_2695));
        Note note1_7887 = new Note(418.0f, 2, 0, 1, 1);
        Note note2_7887 = new Note(418.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_7887.equalNotePlacement(note2_7887));
        Note note1_8225 = new Note(418.5f, 2, 2, 1, 0);
        Note note2_8225 = new Note(418.5f, 1, 0, 0, 7);
        Assertions.assertFalse(note1_8225.equalNotePlacement(note2_8225));
        Note note1_2326 = new Note(419.0f, 1, 0, 1, 6);
        Note note2_2326 = new Note(419.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_2326.equalNotePlacement(note2_2326));
        Note note1_2458 = new Note(448.5f, 3, 2, 1, 0);
        Note note2_2458 = new Note(448.5f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_2458.equalNotePlacement(note2_2458));
        Note note1_3564 = new Note(449.5f, 3, 0, 1, 1);
        Note note2_3564 = new Note(449.5f, 0, 2, 0, 4);
        Assertions.assertFalse(note1_3564.equalNotePlacement(note2_3564));
        Note note1_6867 = new Note(450.5f, 3, 2, 1, 0);
        Note note2_6867 = new Note(450.5f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_6867.equalNotePlacement(note2_6867));
        Note note1_4274 = new Note(451.5f, 3, 0, 1, 1);
        Note note2_4274 = new Note(451.5f, 2, 0, 0, 0);
        Assertions.assertFalse(note1_4274.equalNotePlacement(note2_4274));
        Note note1_7649 = new Note(452.5f, 3, 2, 1, 0);
        Note note2_7649 = new Note(452.5f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_7649.equalNotePlacement(note2_7649));
        Note note1_9076 = new Note(453.5f, 3, 0, 1, 1);
        Note note2_9076 = new Note(453.5f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_9076.equalNotePlacement(note2_9076));
        Note note1_7480 = new Note(454.5f, 3, 1, 1, 0);
        Note note2_7480 = new Note(454.5f, 1, 2, 0, 0);
        Assertions.assertFalse(note1_7480.equalNotePlacement(note2_7480));
        Note note1_177 = new Note(455.5f, 2, 0, 1, 1);
        Note note2_177 = new Note(455.5f, 0, 0, 0, 0);
        Assertions.assertFalse(note1_177.equalNotePlacement(note2_177));
        Note note1_1716 = new Note(456.5f, 2, 2, 1, 0);
        Note note2_1716 = new Note(456.5f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_1716.equalNotePlacement(note2_1716));
        Note note1_8820 = new Note(457.5f, 3, 0, 1, 1);
        Note note2_8820 = new Note(457.5f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_8820.equalNotePlacement(note2_8820));
        Note note1_847 = new Note(458.5f, 2, 0, 1, 0);
        Note note2_847 = new Note(458.5f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_847.equalNotePlacement(note2_847));
        Note note1_824 = new Note(459.5f, 2, 0, 1, 1);
        Note note2_824 = new Note(459.5f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_824.equalNotePlacement(note2_824));
        Note note1_5342 = new Note(460.5f, 3, 0, 1, 0);
        Note note2_5342 = new Note(460.5f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_5342.equalNotePlacement(note2_5342));
        Note note1_7921 = new Note(461.5f, 2, 0, 1, 1);
        Note note2_7921 = new Note(461.5f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_7921.equalNotePlacement(note2_7921));
        Note note1_2166 = new Note(462.5f, 2, 2, 1, 0);
        Note note2_2166 = new Note(462.5f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_2166.equalNotePlacement(note2_2166));
        Note note1_815 = new Note(463.5f, 2, 0, 1, 1);
        Note note2_815 = new Note(463.5f, 1, 0, 0, 4);
        Assertions.assertFalse(note1_815.equalNotePlacement(note2_815));
        Note note1_9714 = new Note(465.5f, 2, 0, 1, 6);
        Note note2_9714 = new Note(465.5f, 2, 2, 0, 5);
        Assertions.assertFalse(note1_9714.equalNotePlacement(note2_9714));
        Note note1_6182 = new Note(467.0f, 3, 2, 1, 5);
        Note note2_6182 = new Note(467.0f, 0, 1, 0, 4);
        Assertions.assertFalse(note1_6182.equalNotePlacement(note2_6182));
        Note note1_5962 = new Note(468.5f, 2, 0, 1, 1);
        Note note2_5962 = new Note(468.5f, 0, 1, 0, 0);
        Assertions.assertFalse(note1_5962.equalNotePlacement(note2_5962));
        Note note1_5987 = new Note(469.5f, 3, 2, 1, 5);
        Note note2_5987 = new Note(469.5f, 0, 2, 0, 0);
        Assertions.assertFalse(note1_5987.equalNotePlacement(note2_5987));
    }

    @Test
    void testHashCode() {

        Assertions.assertEquals(-143370080 , note01.hashCode());
        Assertions.assertEquals(-821749599 , note02.hashCode());
        Assertions.assertEquals(-1177708382, note03.hashCode());
        Assertions.assertEquals(-593094493 , note04.hashCode());
        Assertions.assertEquals(1281267876 , note05.hashCode());
        Assertions.assertEquals(-82372443  , note06.hashCode());
        Assertions.assertEquals(-1009280858, note07.hashCode());
        Assertions.assertEquals(361240743  , note08.hashCode());
        Assertions.assertEquals(5281952    , note09.hashCode());
        Assertions.assertEquals(589895841  , note10.hashCode());
        Assertions.assertEquals(-2027874111, note11.hashCode());
        Assertions.assertEquals(706287810  , note12.hashCode());
        Assertions.assertEquals(-417785661 , note13.hashCode());
        Assertions.assertEquals(755570884  , note14.hashCode());
        Assertions.assertEquals(202447045  , note15.hashCode());
        Assertions.assertEquals(589895878  , note16.hashCode());
        Assertions.assertEquals(-2027874113, note17.hashCode());
        Assertions.assertEquals(706287808  , note18.hashCode());
        Assertions.assertEquals(-417785663 , note19.hashCode());
        Assertions.assertEquals(755570882  , note20.hashCode());
        Assertions.assertEquals(202447043  , note21.hashCode());
    }

    @Test
    void testToString() {

        Assertions.assertEquals("{\"_time\":255.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":1}", note01.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":256.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":2}", note02.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":257.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":3}", note03.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":258.5,\"_lineIndex\":1,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":4}", note04.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":259.5,\"_lineIndex\":2,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":5}", note05.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":260.5,\"_lineIndex\":3,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":6}", note06.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":261.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":7}", note07.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":262.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":8}", note08.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":263.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":1}", note09.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":2}", note10.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":3}", note11.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":4}", note12.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":5}", note13.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":6}", note14.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":7}", note15.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":8}", note16.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":1}", note17.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":2}", note18.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":3}", note19.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":4}", note20.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":5}", note21.toString().replace("\n", ""));
    }

    @Test
    void testInvertNote() {
        Note note01 = new Note(255.5f, 1, 1, 0, 1);
        Note note02 = new Note(256.5f, 2, 1, 0, 2);
        Note note03 = new Note(257.5f, 3, 2, 0, 3);
        Note note04 = new Note(258.5f, 1, 2, 0, 4);
        Note note05 = new Note(259.5f, 2, 3, 0, 5);
        Note note06 = new Note(260.5f, 3, 3, 0, 6);
        Note note07 = new Note(261.5f, 1, 1, 0, 7);
        Note note08 = new Note(262.5f, 2, 1, 0, 8);
        Note note09 = new Note(263.5f, 3, 2, 0, 1);
        Note note10 = new Note(264.5f, 1, 2, 0, 2);
        Note note11 = new Note(264.5f, 2, 3, 1, 3);
        Note note12 = new Note(264.5f, 3, 3, 1, 4);
        Note note13 = new Note(264.5f, 1, 1, 1, 5);
        Note note14 = new Note(264.5f, 2, 1, 1, 6);
        Note note15 = new Note(264.5f, 3, 2, 1, 7);
        Note note16 = new Note(264.5f, 1, 2, 1, 8);
        Note note17 = new Note(264.5f, 2, 3, 1, 1);
        Note note18 = new Note(264.5f, 3, 3, 1, 2);
        Note note19 = new Note(264.5f, 1, 1, 1, 3);
        Note note20 = new Note(264.5f, 2, 1, 1, 4);
        Note note21 = new Note(264.5f, 3, 2, 1, 5);


        Assertions.assertEquals("{\"_time\":255.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":1}", note01.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":256.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":3}", note02.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":257.5,\"_lineIndex\":0,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":2}", note03.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":258.5,\"_lineIndex\":2,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":5}", note04.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":259.5,\"_lineIndex\":1,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":4}", note05.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":260.5,\"_lineIndex\":0,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":7}", note06.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":261.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":6}", note07.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":262.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":8}", note08.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":263.5,\"_lineIndex\":0,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":1}", note09.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":3}", note10.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":2}", note11.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":0,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":5}", note12.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":4}", note13.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":7}", note14.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":0,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":6}", note15.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":8}", note16.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":1}", note17.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":0,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":3}", note18.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":2}", note19.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":5}", note20.invertNote().toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":0,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":4}", note21.invertNote().toString().replace("\n", ""));

        note01.invertNote();
        note02.invertNote();
        note03.invertNote();
        note04.invertNote();
        note05.invertNote();
        note06.invertNote();
        note07.invertNote();
        note08.invertNote();
        note09.invertNote();
        note10.invertNote();
        note11.invertNote();
        note12.invertNote();
        note13.invertNote();
        note14.invertNote();
        note15.invertNote();
        note16.invertNote();
        note17.invertNote();
        note18.invertNote();
        note19.invertNote();
        note20.invertNote();
        note21.invertNote();

        Assertions.assertEquals("{\"_time\":255.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":1}", note01.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":256.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":2}", note02.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":257.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":3}", note03.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":258.5,\"_lineIndex\":1,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":4}", note04.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":259.5,\"_lineIndex\":2,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":5}", note05.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":260.5,\"_lineIndex\":3,\"_lineLayer\":3,\"_type\":0,\"_cutDirection\":6}", note06.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":261.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":7}", note07.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":262.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":0,\"_cutDirection\":8}", note08.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":263.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":1}", note09.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":2,\"_type\":0,\"_cutDirection\":2}", note10.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":3}", note11.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":4}", note12.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":5}", note13.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":6}", note14.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":7}", note15.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":8}", note16.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":1}", note17.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":3,\"_type\":1,\"_cutDirection\":2}", note18.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":1,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":3}", note19.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":2,\"_lineLayer\":1,\"_type\":1,\"_cutDirection\":4}", note20.toString().replace("\n", ""));
        Assertions.assertEquals("{\"_time\":264.5,\"_lineIndex\":3,\"_lineLayer\":2,\"_type\":1,\"_cutDirection\":5}", note21.toString().replace("\n", ""));

    }

    @Test
    void createStackedNote() {
        Note note00 = new Note(0, 0, 0, 0, 0);
        Note note01 = new Note(0, 0, 0, 0, 1);
        note00.amountOfStackedNotes = 3;
        note01.amountOfStackedNotes = 3;
        Assertions.assertArrayEquals(new Note[]{note00}, note00.createStackedNote());
        Assertions.assertArrayEquals(new Note[]{note01}, note01.createStackedNote());

        note00 = new Note(0, 2, 0, 0, 0);
        note01 = new Note(0, 2, 0, 0, 1);
        note00.amountOfStackedNotes = 3;
        note01.amountOfStackedNotes = 3;
        Assertions.assertEquals(2, note00.createStackedNote().length);
        Assertions.assertEquals(2, note01.createStackedNote().length);

        note00 = new Note(0, 3, 0, 0, 0);
        note01 = new Note(0, 3, 0, 0, 1);
        note00.amountOfStackedNotes = 3;
        note01.amountOfStackedNotes = 3;
        Assertions.assertEquals(3, note00.createStackedNote().length);
        Assertions.assertEquals(3, note01.createStackedNote().length);


        note00 = new Note(0, 0, 0, 0, 5);
        note01 = new Note(0, 0, 0, 0, 6);
        note00.amountOfStackedNotes = 3;
        note01.amountOfStackedNotes = 3;
        Assertions.assertEquals(2, note00.createStackedNote().length);
        Assertions.assertEquals(2, note01.createStackedNote().length);

        Note note02 = new Note(0, 0, 0, 0, 2);
        Note note03 = new Note(0, 0, 0, 0, 3);
        Note note04 = new Note(0, 0, 0, 0, 4);
        Note note07 = new Note(0, 0, 0, 0, 7);
        Note note08 = new Note(0, 0, 0, 0, 8);
        note02.amountOfStackedNotes = 3;
        note03.amountOfStackedNotes = 3;
        note04.amountOfStackedNotes = 3;
        note07.amountOfStackedNotes = 3;
        note08.amountOfStackedNotes = 3;
        Assertions.assertEquals(1, note02.createStackedNote().length);
        Assertions.assertEquals(1, note03.createStackedNote().length);
        Assertions.assertEquals(1, note04.createStackedNote().length);
        Assertions.assertEquals(1, note07.createStackedNote().length);
        Assertions.assertEquals(1, note08.createStackedNote().length);
    }

    @Test
    void compareTo() {
        //System.out.println("Assertions.assertEquals(" + Float.compare(this._time, o._time) + ", new BeatSaberObjects.Objects.Note (" + _time + "f, " + _lineIndex + ", " + _lineLayer + ", " + _type + ", " + _cutDirection + ").compareTo(new BeatSaberObjects.Objects.Note (" + o._time + "f, " + o._lineIndex + ", " + o._lineLayer + ", " + o._type + ", " + o._cutDirection + ")));");

        Assertions.assertEquals(1, new Note(1151.0328f, 0, 1, 0, 4).compareTo(new Note(1150.0394f, 3, 0, 1, 7)));
        Assertions.assertEquals(1, new Note(1153.028f, 2, 0, 1, 4).compareTo(new Note(1151.0328f, 0, 1, 0, 4)));
        Assertions.assertEquals(1, new Note(1155.0276f, 1, 0, 0, 1).compareTo(new Note(1153.028f, 2, 0, 1, 4)));
        Assertions.assertEquals(1, new Note(1157.0154f, 2, 0, 1, 1).compareTo(new Note(1155.0276f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1159.028f, 2, 2, 0, 5).compareTo(new Note(1157.0154f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1161.0247f, 3, 2, 1, 0).compareTo(new Note(1159.028f, 2, 2, 0, 5)));
        Assertions.assertEquals(1, new Note(1163.0315f, 1, 0, 0, 1).compareTo(new Note(1161.0247f, 3, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1163.5614f, 2, 0, 1, 1).compareTo(new Note(1163.0315f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1164.0411f, 2, 2, 0, 5).compareTo(new Note(1163.5614f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1164.5677f, 3, 1, 1, 5).compareTo(new Note(1164.0411f, 2, 2, 0, 5)));
        Assertions.assertEquals(1, new Note(1165.0284f, 0, 1, 0, 6).compareTo(new Note(1164.5677f, 3, 1, 1, 5)));
        Assertions.assertEquals(1, new Note(1166.0371f, 2, 0, 1, 6).compareTo(new Note(1165.0284f, 0, 1, 0, 6)));
        Assertions.assertEquals(1, new Note(1167.0247f, 1, 2, 0, 0).compareTo(new Note(1166.0371f, 2, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1168.0426f, 3, 2, 1, 5).compareTo(new Note(1167.0247f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1169.0406f, 1, 2, 0, 1).compareTo(new Note(1168.0426f, 3, 2, 1, 5)));
        Assertions.assertEquals(1, new Note(1170.0356f, 3, 0, 1, 1).compareTo(new Note(1169.0406f, 1, 2, 0, 1)));
        Assertions.assertEquals(1, new Note(1171.0443f, 0, 0, 0, 0).compareTo(new Note(1170.0356f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1172.0256f, 3, 1, 1, 0).compareTo(new Note(1171.0443f, 0, 0, 0, 0)));
        Assertions.assertEquals(1, new Note(1172.5458f, 1, 0, 0, 1).compareTo(new Note(1172.0256f, 3, 1, 1, 0)));
        Assertions.assertEquals(1, new Note(1173.0319f, 3, 1, 1, 1).compareTo(new Note(1172.5458f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1173.569f, 0, 2, 0, 4).compareTo(new Note(1173.0319f, 3, 1, 1, 1)));
        Assertions.assertEquals(1, new Note(1174.0258f, 3, 1, 1, 0).compareTo(new Note(1173.569f, 0, 2, 0, 4)));
        Assertions.assertEquals(1, new Note(1175.0393f, 1, 0, 0, 7).compareTo(new Note(1174.0258f, 3, 1, 1, 0)));
        Assertions.assertEquals(1, new Note(1176.0199f, 3, 0, 1, 1).compareTo(new Note(1175.0393f, 1, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1177.0436f, 0, 2, 0, 4).compareTo(new Note(1176.0199f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1178.019f, 3, 1, 1, 5).compareTo(new Note(1177.0436f, 0, 2, 0, 4)));
        Assertions.assertEquals(1, new Note(1179.0425f, 2, 0, 0, 7).compareTo(new Note(1178.019f, 3, 1, 1, 5)));
        Assertions.assertEquals(1, new Note(1179.5747f, 1, 0, 1, 6).compareTo(new Note(1179.0425f, 2, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1180.0393f, 0, 1, 0, 4).compareTo(new Note(1179.5747f, 1, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1180.5717f, 2, 0, 1, 0).compareTo(new Note(1180.0393f, 0, 1, 0, 4)));
        Assertions.assertEquals(1, new Note(1181.0393f, 1, 0, 0, 7).compareTo(new Note(1180.5717f, 2, 0, 1, 0)));
        Assertions.assertEquals(1, new Note(1182.0334f, 2, 0, 1, 1).compareTo(new Note(1181.0393f, 1, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1183.0208f, 0, 1, 0, 4).compareTo(new Note(1182.0334f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1185.0282f, 2, 2, 1, 0).compareTo(new Note(1183.0208f, 0, 1, 0, 4)));
        Assertions.assertEquals(1, new Note(1187.0438f, 1, 0, 0, 7).compareTo(new Note(1185.0282f, 2, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1189.0227f, 2, 0, 1, 1).compareTo(new Note(1187.0438f, 1, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1191.0232f, 0, 1, 0, 4).compareTo(new Note(1189.0227f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1193.0321f, 3, 0, 1, 0).compareTo(new Note(1191.0232f, 0, 1, 0, 4)));
        Assertions.assertEquals(1, new Note(1194.0367f, 2, 0, 0, 7).compareTo(new Note(1193.0321f, 3, 0, 1, 0)));
        Assertions.assertEquals(1, new Note(1195.0353f, 3, 0, 1, 1).compareTo(new Note(1194.0367f, 2, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1195.5702f, 1, 2, 0, 0).compareTo(new Note(1195.0353f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1196.0469f, 3, 0, 1, 0).compareTo(new Note(1195.5702f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1196.5648f, 0, 1, 0, 6).compareTo(new Note(1196.0469f, 3, 0, 1, 0)));
        Assertions.assertEquals(1, new Note(1197.0349f, 3, 0, 1, 1).compareTo(new Note(1196.5648f, 0, 1, 0, 6)));
        Assertions.assertEquals(1, new Note(1198.0371f, 1, 2, 0, 0).compareTo(new Note(1197.0349f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1199.0276f, 3, 1, 1, 0).compareTo(new Note(1198.0371f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1200.0435f, 0, 1, 0, 6).compareTo(new Note(1199.0276f, 3, 1, 1, 0)));
        Assertions.assertEquals(1, new Note(1201.0422f, 2, 0, 1, 6).compareTo(new Note(1200.0435f, 0, 1, 0, 6)));
        Assertions.assertEquals(1, new Note(1202.0404f, 1, 2, 0, 0).compareTo(new Note(1201.0422f, 2, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1203.0442f, 3, 2, 1, 5).compareTo(new Note(1202.0404f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1203.5726f, 2, 0, 0, 7).compareTo(new Note(1203.0442f, 3, 2, 1, 5)));
        Assertions.assertEquals(1, new Note(1204.0197f, 3, 0, 1, 1).compareTo(new Note(1203.5726f, 2, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1204.5475f, 0, 0, 0, 4).compareTo(new Note(1204.0197f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1205.0378f, 3, 2, 1, 0).compareTo(new Note(1204.5475f, 0, 0, 0, 4)));
        Assertions.assertEquals(1, new Note(1205.5516f, 1, 0, 0, 1).compareTo(new Note(1205.0378f, 3, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1206.0232f, 2, 0, 1, 1).compareTo(new Note(1205.5516f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1207.0415f, 0, 2, 0, 0).compareTo(new Note(1206.0232f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1208.02f, 2, 2, 1, 0).compareTo(new Note(1207.0415f, 0, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1208.563f, 1, 0, 0, 1).compareTo(new Note(1208.02f, 2, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1209.0424f, 2, 0, 1, 1).compareTo(new Note(1208.563f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1210.0219f, 1, 2, 0, 0).compareTo(new Note(1209.0424f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1211.0432f, 1, 0, 1, 5).compareTo(new Note(1210.0219f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1211.5723f, 0, 0, 0, 1).compareTo(new Note(1211.0432f, 1, 0, 1, 5)));
        Assertions.assertEquals(1, new Note(1212.0375f, 1, 0, 1, 6).compareTo(new Note(1211.5723f, 0, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1212.5679f, 0, 1, 0, 0).compareTo(new Note(1212.0375f, 1, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1213.0409f, 3, 2, 1, 5).compareTo(new Note(1212.5679f, 0, 1, 0, 0)));
        Assertions.assertEquals(1, new Note(1214.0327f, 0, 0, 0, 1).compareTo(new Note(1213.0409f, 3, 2, 1, 5)));
        Assertions.assertEquals(1, new Note(1215.0359f, 1, 0, 1, 6).compareTo(new Note(1214.0327f, 0, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1217.0367f, 0, 2, 0, 0).compareTo(new Note(1215.0359f, 1, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1219.0356f, 3, 2, 1, 5).compareTo(new Note(1217.0367f, 0, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1221.0251f, 2, 0, 0, 7).compareTo(new Note(1219.0356f, 3, 2, 1, 5)));
        Assertions.assertEquals(1, new Note(1227.0989f, 3, 0, 1, 1).compareTo(new Note(1221.0251f, 2, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1229.1134f, 0, 2, 0, 4).compareTo(new Note(1227.0989f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1230.0883f, 3, 2, 1, 0).compareTo(new Note(1229.1134f, 0, 2, 0, 4)));
        Assertions.assertEquals(1, new Note(1231.0795f, 1, 0, 0, 1).compareTo(new Note(1230.0883f, 3, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1232.0901f, 3, 0, 1, 1).compareTo(new Note(1231.0795f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1232.588f, 0, 1, 0, 0).compareTo(new Note(1232.0901f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1234.0958f, 2, 2, 1, 0).compareTo(new Note(1232.588f, 0, 1, 0, 0)));
        Assertions.assertEquals(1, new Note(1234.9127f, 2, 0, 0, 7).compareTo(new Note(1234.0958f, 2, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1235.6118f, 3, 2, 1, 1).compareTo(new Note(1234.9127f, 2, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1236.0945f, 0, 2, 0, 4).compareTo(new Note(1235.6118f, 3, 2, 1, 1)));
        Assertions.assertEquals(1, new Note(1236.5964f, 2, 0, 1, 5).compareTo(new Note(1236.0945f, 0, 2, 0, 4)));
        Assertions.assertEquals(1, new Note(1237.0834f, 0, 0, 0, 1).compareTo(new Note(1236.5964f, 2, 0, 1, 5)));
        Assertions.assertEquals(1, new Note(1238.1002f, 3, 0, 1, 1).compareTo(new Note(1237.0834f, 0, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1238.592f, 0, 2, 0, 0).compareTo(new Note(1238.1002f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1239.0886f, 3, 1, 1, 0).compareTo(new Note(1238.592f, 0, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1240.0938f, 0, 1, 0, 1).compareTo(new Note(1239.0886f, 3, 1, 1, 0)));
        Assertions.assertEquals(1, new Note(1241.1074f, 3, 0, 1, 1).compareTo(new Note(1240.0938f, 0, 1, 0, 1)));
        Assertions.assertEquals(1, new Note(1241.591f, 0, 2, 0, 0).compareTo(new Note(1241.1074f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1242.0754f, 3, 0, 1, 0).compareTo(new Note(1241.591f, 0, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1243.0962f, 0, 1, 0, 1).compareTo(new Note(1242.0754f, 3, 0, 1, 0)));
        Assertions.assertEquals(1, new Note(1244.1108f, 1, 0, 1, 6).compareTo(new Note(1243.0962f, 0, 1, 0, 1)));
        Assertions.assertEquals(1, new Note(1245.1099f, 0, 1, 0, 0).compareTo(new Note(1244.1108f, 1, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1246.1003f, 3, 1, 1, 5).compareTo(new Note(1245.1099f, 0, 1, 0, 0)));
        Assertions.assertEquals(1, new Note(1247.093f, 0, 1, 0, 1).compareTo(new Note(1246.1003f, 3, 1, 1, 5)));
        Assertions.assertEquals(1, new Note(1248.0941f, 1, 1, 1, 6).compareTo(new Note(1247.093f, 0, 1, 0, 1)));
        Assertions.assertEquals(1, new Note(1250.0844f, 1, 2, 0, 0).compareTo(new Note(1248.0941f, 1, 1, 1, 6)));
        Assertions.assertEquals(1, new Note(1251.6012f, 3, 2, 1, 5).compareTo(new Note(1250.0844f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1252.1034f, 0, 0, 0, 6).compareTo(new Note(1251.6012f, 3, 2, 1, 5)));
        Assertions.assertEquals(1, new Note(1253.0956f, 2, 0, 1, 6).compareTo(new Note(1252.1034f, 0, 0, 0, 6)));
        Assertions.assertEquals(1, new Note(1253.5804f, 1, 2, 0, 5).compareTo(new Note(1253.0956f, 2, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1254.5876f, 3, 2, 1, 5).compareTo(new Note(1253.5804f, 1, 2, 0, 5)));
        Assertions.assertEquals(1, new Note(1255.0708f, 0, 1, 0, 1).compareTo(new Note(1254.5876f, 3, 2, 1, 5)));
        Assertions.assertEquals(1, new Note(1258.1327f, 3, 0, 1, 1).compareTo(new Note(1255.0708f, 0, 1, 0, 1)));
        Assertions.assertEquals(1, new Note(1259.2157f, 0, 2, 0, 0).compareTo(new Note(1258.1327f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1260.3315f, 2, 2, 1, 0).compareTo(new Note(1259.2157f, 0, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1261.4297f, 0, 1, 0, 1).compareTo(new Note(1260.3315f, 2, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1261.9882f, 1, 0, 1, 6).compareTo(new Note(1261.4297f, 0, 1, 0, 1)));
        Assertions.assertEquals(1, new Note(1262.5483f, 0, 1, 0, 0).compareTo(new Note(1261.9882f, 1, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1263.7219f, 3, 1, 1, 5).compareTo(new Note(1262.5483f, 0, 1, 0, 0)));
        Assertions.assertEquals(1, new Note(1264.8923f, 2, 0, 0, 7).compareTo(new Note(1263.7219f, 3, 1, 1, 5)));
        Assertions.assertEquals(1, new Note(1265.4894f, 3, 2, 1, 1).compareTo(new Note(1264.8923f, 2, 0, 0, 7)));
        Assertions.assertEquals(1, new Note(1266.1067f, 1, 0, 0, 4).compareTo(new Note(1265.4894f, 3, 2, 1, 1)));
        Assertions.assertEquals(1, new Note(1266.7267f, 3, 1, 1, 5).compareTo(new Note(1266.1067f, 1, 0, 0, 4)));
        Assertions.assertEquals(1, new Note(1267.3435f, 0, 0, 0, 1).compareTo(new Note(1266.7267f, 3, 1, 1, 5)));
        Assertions.assertEquals(1, new Note(1268.5836f, 2, 0, 1, 6).compareTo(new Note(1267.3435f, 0, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1270.553f, 1, 2, 0, 0).compareTo(new Note(1268.5836f, 2, 0, 1, 6)));
        Assertions.assertEquals(1, new Note(1271.921f, 3, 1, 1, 5).compareTo(new Note(1270.553f, 1, 2, 0, 0)));
        Assertions.assertEquals(1, new Note(1272.603f, 0, 0, 0, 1).compareTo(new Note(1271.921f, 3, 1, 1, 5)));
        Assertions.assertEquals(1, new Note(1273.97f, 2, 0, 1, 1).compareTo(new Note(1272.603f, 0, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1276.9188f, 1, 0, 0, 0).compareTo(new Note(1273.97f, 2, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1278.4379f, 3, 0, 1, 0).compareTo(new Note(1276.9188f, 1, 0, 0, 0)));
        Assertions.assertEquals(1, new Note(1279.9796f, 1, 0, 0, 1).compareTo(new Note(1278.4379f, 3, 0, 1, 0)));
        Assertions.assertEquals(1, new Note(1283.2336f, 3, 0, 1, 1).compareTo(new Note(1279.9796f, 1, 0, 0, 1)));
        Assertions.assertEquals(1, new Note(1286.7151f, 1, 0, 0, 0).compareTo(new Note(1283.2336f, 3, 0, 1, 1)));
        Assertions.assertEquals(1, new Note(1292.161f, 3, 2, 1, 0).compareTo(new Note(1286.7151f, 1, 0, 0, 0)));
        Assertions.assertEquals(1, new Note(1293.0804f, 0, 0, 0, 1).compareTo(new Note(1292.161f, 3, 2, 1, 0)));
        Assertions.assertEquals(1, new Note(1293.9529f, 3, 0, 1, 1).compareTo(new Note(1293.0804f, 0, 0, 0, 1)));
    }

    @Test
    void timingNote() {
        TimingNote note1 = new TimingNote(0);
        TimingNote note2 = new TimingNote(10);
        TimingNote note3 = new TimingNote(1.1f);
        Assertions.assertEquals(0, note1._time);
        Assertions.assertEquals(10, note2._time);
        Assertions.assertEquals(1.1f, note3._time);

        Assertions.assertEquals(0, note1._lineIndex);
        Assertions.assertEquals(0, note2._lineIndex);
        Assertions.assertEquals(0, note3._lineIndex);

        Assertions.assertEquals(0, note1._lineLayer);
        Assertions.assertEquals(0, note2._lineLayer);
        Assertions.assertEquals(0, note3._lineLayer);

        Assertions.assertEquals(1, note1._type);
        Assertions.assertEquals(1, note2._type);
        Assertions.assertEquals(1, note3._type);

        Assertions.assertEquals(8, note1._cutDirection);
        Assertions.assertEquals(8, note2._cutDirection);
        Assertions.assertEquals(8, note3._cutDirection);

        Assertions.assertEquals(0, note1.amountOfStackedNotes);
        Assertions.assertEquals(0, note2.amountOfStackedNotes);
        Assertions.assertEquals(0, note3.amountOfStackedNotes);
    }

    /*
    Boolean test methode:
        int rand = (int) (new Random().nextFloat()*10000);
        System.out.println("BeatSaberObjects.Objects.Note note1_" + rand + " = new BeatSaberObjects.Objects.Note (" + _time + "f, " + _lineIndex + ", " + _lineLayer + ", " + _type + ", " + _cutDirection + ");");
        System.out.println("BeatSaberObjects.Objects.Note note2_" + rand + " = new BeatSaberObjects.Objects.Note (" + note._time + "f, " + note._lineIndex + ", " + note._lineLayer + ", " + note._type + ", " + note._cutDirection + ");");
        if (b) System.out.println("Assertions.assertTrue(note1_" + rand + ".equalNotePlacement(note2_" + rand + "));");
        else System.out.println("Assertions.assertFalse(note1_" + rand + ".equalNotePlacement(note2_" + rand + "));");

     */
}