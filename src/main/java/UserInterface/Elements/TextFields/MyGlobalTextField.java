package UserInterface.Elements.TextFields;

import DataManager.Parameters;
import MapGeneration.PatternGeneration.CommonMethods.Parser;
import UserInterface.UserInterface;
import lombok.AllArgsConstructor;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import static DataManager.Parameters.logger;

public class MyGlobalTextField extends TextField {
    protected final UserInterface ui;

    /**
     * Constructs a `MyGlobalTextField` with the specified type and user interface context.
     * The text field is initialized with its bounds, visibility, and color settings based on the provided `TextFieldType` and global parameters.
     *
     * @param textFieldType The type of the text field, which determines its initial configuration.
     * @param ui            The `UserInterface` instance that this text field belongs to.
     */
    public MyGlobalTextField(TextFieldType textFieldType, UserInterface ui) {
        super(textFieldType.value(), 0);
        this.ui = ui;

        setBounds(textFieldType.x(), textFieldType.y(), textFieldType.w(), textFieldType.h());
        setVisible(textFieldType.setVisible());

        if (Parameters.DARK_MODE) setBackground(Color.black);
        if (Parameters.DARK_MODE) setForeground(Color.white);

        ui.add(this);
    }

    /**
     * The `NumericKeyListener` is an abstract static class that extends `KeyAdapter` to handle numeric input in text fields.
     * It provides methods to set the label text and retrieve numeric values as `long` or `double`.
     * This class enforces constraints on the length of input and ensures that the text is parsed into a valid numeric format.
     */
    @AllArgsConstructor
    protected abstract static class NumericKeyListener extends KeyAdapter{
        protected final String name;
        protected final int maxLabelTextLength;
        protected String labelText;

        @Override
        public void keyTyped(KeyEvent e) {
            // Autogenerated. Not needed
        }

        @Override
        public void keyPressed(KeyEvent e) {
            // Autogenerated. Not needed
        }

        /**
         * Sets the label text for this key listener, enforcing a maximum length constraint.
         * If the provided text exceeds the allowed length, an error message is logged.
         *
         * @param labelText The new label text to set.
         */
        public void setLabelText(String labelText) {
            if (labelText.length() >= maxLabelTextLength){
                String errorMessage = name + " is too long! It must be at most " + maxLabelTextLength +" digits long!";
                logger.error(errorMessage);
                System.err.println(errorMessage);
                return;
            }

            this.labelText = labelText.replace(" ", "");
        }


        /**
         * Retrieves the numeric value from the label text as a `long`.
         * The text is parsed using the `Parser.parseValue` method.
         *
         * @return The numeric value as a `long`, or `-1L` if parsing fails.
         */
        public long getLongValue() { return Parser.parseValue(labelText, name, Long::parseLong, -1L); }

        /**
         * Retrieves the numeric value from the label text as a `double`.
         * The text is parsed using the `Parser.parseValue` method.
         *
         * @return The numeric value as a `double`, or `-1.0` if parsing fails.
         */
        public double getDoubleValue() { return Parser.parseValue(labelText, name, Double::parseDouble, -1.0); }
    }
}
