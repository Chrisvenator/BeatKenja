package UserInterface.Elements.TextFields;

import DataManager.Parameters;
import MapGeneration.PatternGeneration.CommonMethods.Parser;
import UserInterface.UserInterface;
import lombok.AllArgsConstructor;

import java.awt.*;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import static DataManager.Parameters.logger;

public class MyGlobalTextField extends TextField {
    protected final UserInterface ui;

    public MyGlobalTextField(TextFieldType textFieldType, UserInterface ui) {
        super(textFieldType.value(), 0);
        this.ui = ui;

        setBounds(textFieldType.x(), textFieldType.y(), textFieldType.w(), textFieldType.h());
        setVisible(textFieldType.setVisible());

        if (Parameters.DARK_MODE) setBackground(Color.black);
        if (Parameters.DARK_MODE) setForeground(Color.white);

        ui.add(this);
    }

    @AllArgsConstructor
    protected abstract static class NumericKeyListener extends KeyAdapter{
        protected final String name;
        protected final int maxLabelTextLength;
        protected String labelText;

        @Override
        public void keyTyped(KeyEvent e) {
            // Autogenerated. Not needed
        }

        @Override
        public void keyPressed(KeyEvent e) {
            // Autogenerated. Not needed
        }

        public void setLabelText(String lableText) {
            if (lableText.length() >= maxLabelTextLength){
                String errorMessage = name + " is too long! It must be at most " + maxLabelTextLength +" digits long!";
                logger.error(errorMessage);
                System.err.println(errorMessage);
                return;
            }

            this.labelText = lableText.replace(" ", "");
        }



        public long getLongValue() { return Parser.parseValue(labelText, name, Long::parseLong, -1L); }

        public double getDoubleValue() { return Parser.parseValue(labelText, name, Double::parseDouble, -1.0); }
    };
}
